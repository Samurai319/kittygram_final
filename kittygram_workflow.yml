name: Kittygram CI/CD

on:
  push:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
  TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Backend
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8
      - name: Flake8
        working-directory: backend
        run: flake8 .
      - name: Pytest backend
        working-directory: backend
        run: pytest -q

      # Frontend
      - uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: NPM CI + tests + build
        working-directory: frontend
        run: |
          npm ci
          npm test --silent || echo "no tests"
          npm run build

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest

      - name: Build & push gateway
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upload compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "/home/${{ env.SSH_USER }}/kittygram"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: |
            set -e
            cd ~/kittygram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --remove-orphans
            docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            docker compose -f docker-compose.production.yml exec -T frontend sh -lc 'rm -rf /usr/share/nginx/html/* && cp -r /app/build/* /usr/share/nginx/html/'

      - name: Telegram notify (success)
        if: success() && env.TELEGRAM_TOKEN != '' && env.TELEGRAM_TO != ''
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_TO }} \
            -d text="Kittygram: деплой успешно завершён ✅"

      - name: Telegram notify (fail)
        if: failure() && env.TELEGRAM_TOKEN != '' && env.TELEGRAM_TO != ''
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_TO }} \
            -d text="Kittygram: деплой упал ❌"
