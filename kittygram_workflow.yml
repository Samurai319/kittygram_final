name: Kittygram CI/CD

on:
  push:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
  TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install system dependencies for Pillow
        run: |
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev zlib1g-dev

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest

      - name: Flake8
        working-directory: backend
        run: flake8 .

      - name: Pytest backend (only if tests exist)
        run: |
          if [ -d backend/tests ] && [ "$(ls -A backend/tests)" ]; then
            python -m pytest -q backend
          else
            echo "No backend tests found, skipping."
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: NPM CI + tests + build (ignore CRA warnings)
        working-directory: frontend
        run: |
          npm ci
          npm test --silent || echo "no frontend tests"
          CI=false npm run build

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Debug DockerHub secrets presence
        run: |
          [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && echo "DH_USER: set" || echo "DH_USER: EMPTY"
          [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ] && echo "DH_TOKEN: set" || echo "DH_TOKEN: EMPTY"

      - name: Login to Docker Hub (manual)
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:${{ github.sha }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:${{ github.sha }}

      - name: Build & push gateway
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:${{ github.sha }}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare server directory and cleanup
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: |
            set -e
            mkdir -p ~/kittygram/nginx
            sudo docker system prune -af || true

      - name: Upload compose and nginx config to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          source: docker-compose.production.yml,nginx/default.conf
          target: "/home/${{ env.SSH_USER }}/kittygram"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: |
            set -e
            cd ~/kittygram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --remove-orphans
            docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate --noinput
            docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            docker compose -f docker-compose.production.yml ps

      - name: Telegram notify (success)
        if: success() && env.TELEGRAM_TOKEN != '' && env.TELEGRAM_TO != ''
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_TO }} \
            -d text="✅ Kittygram: деплой успешно завершён (commit ${{ github.sha }})"

      - name: Telegram notify (fail)
        if: failure() && env.TELEGRAM_TOKEN != '' && env.TELEGRAM_TO != ''
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_TO }} \
            -d text="❌ Kittygram: деплой упал"
